Kubernetes
From:  https://youtu.be/X48VuDVv0do





Kubernetes:  Open source container orchestration tool
  - developed by google
  - manage containerized applications in different deployment environments
    - physical
    - cloud
    - virtual

containers + microservices >> need to manage hundreds of containers

Kubernetes features:
 - High Availability - no downtime 
 - Scalability - high performance 
 - Disaster Recovery - backup and restore 



######################################################################################
## Kubernetes Components
######################################################################################

Node:  Server, physical or virtual machine

Pod:   Smallest unit of K8s
        - An abstraction over a container
        - pod creates a layer over container (running environment)
        - Kubernetes wants to "abstract away" container runtime
            - ability to replace container tech
        - ONLY interact with Kubernetes Layer (not docker)

NOTE: Pod usually just runs one application inside of it but can run multiple apps in one pod.

    Each Pod gets its own IP address (internal)
        - each pod can communicate with each other utilizing Pod IP Address

    NOTE: pods are ephenemeral and can be killed an spun up.  A new pod will get a new IP address.

        +-Node----------------------------+
        |                                 |
        |        +Pod-------------+       |
        |        |                |       |
        |        |  Application   |       |
        |        |                |-[IP]  |
        |        |[--abstraction-]|  |    |
        |        |  [ container ] |  |    |
        |        +----------------+  |    |
        |                            |    |
        |        +Pod-------------+  |    |
        |        |                |  |    |
        |        |    Database    |  |    |
        |        |                |-[IP]  |
        |        |[--abstraction-]|       |
        |        |  [ container ] |       |
        |        +----------------+       |
        |                                 |
        +---------------------------------+

Service:  Permanent (static) IP Address that can be attached to a pod
        - Life cycle of Pod and Service are NOT connecited

    ex. application can communicate with DB without updating 
        connection if DB pod is restarted

External Service:  Available via web browser, etc
        Utilize Ingress to  map 
        http://124.89.101.2:8080 to https://myapp.com

        Utilize Ingres, routes traffic into cluster

Internal Service:  No external access, service only for other k8s services / objects

        +-Node----------------------------+
        |                                 |
        |    [Secret] [ConfigMap]         |
        |       |          |              |
        |       +----+-----+    [Ingres]--<------- 
        |            |              |     |
        |    +Pod-------------+     |     |
        |    |                |     |     |
        |    |  Application   |     |     |
        |    |                |-[Service] |
        |    |[--abstraction-]|     |     |
        |    |  [ container ] |     |     |
        |    +----------------+     |     |
        |                           |     |
        |    +Pod-------------+     |     |
        |    |                |     |     |
        |    |    Database    |     |     |
        |    |                |-[Service] |
        |    |[--abstraction-]|           |
        |    |  [ container ] |           |
        |    +----------------+           |
        |                                 |
        +---------------------------------+


# ConfigMap / Secret

ConfigMap: external configuration of your application, connect to pod
           contains configuration information needed by app i.e. db connect string
            DB_URL=mongodb

Secret: like configmap but used to store secret data i.e. credentials / certificates
        connect to pod
        - base64 encoded i.e. username / password
            DB_USER=username
            DB_PWD =password

        - Use as ENV vars or properties file

    NOTE: built-in security mechanism is not enabled by default


# Volumes

Volumes:  Persist data (logs, db, etc) beyond the life of a pod.
          Attaches physical hard drive storage to a pod
            - local machine (node storage where pod is located)
            - remote storage (outside of k8s cluster)

        +-Node----------------------------+
        |                                 |
        |    +Pod-------------+           |
        |    |                |           |
        |    |  Application   |           |
        |    |                |-[Service] |
        |    |[--abstraction-]|     |     |
        |    |  [ container ] |     |     |
        |    +----------------+     |     |
        |                           |     |
        |    +Pod-------------+     |     |
        |    |                |     |     |
        |    |    Database    |     |     |
        |    |                |-[Service] |
        |    |[--abstraction-]|           |
        |    |  [ container ] |           |
        |    +----------------+           |
        |         [Volume]----------------+--------[remote ]
        |            |                    |        [storage]
        |            +----[ local ]       |
        |                 [storage]       |
        |                                 |
        +---------------------------------+

NOTE: K8s Does Not Manage Data Persistence


# Deployment / StatefulSet

Deployment:  blueprint of a pod, specify how many replicas
        - Deployment is an abstraction on pods
            Interaction done with Deployments and not Pods directly
        - Can scale up / down number of replicas needed
        - Replica is connected to same Service
        - Service has 2 functions:
            - permanent IP
            - load balancer 



        +------------------------+        +------------------------+
        |              [[--------Deployment--------]]              |
        |               |        |        |        |               |
        |    +Pod-------------+  |        |  +Pod-------------+    |
        |    |                |  |        |  |                |    |
        |    |  Application   |  |        |  |  Application   |    |
        |    |                |---[Service]--|                |    |
        |    +----------------+  |        |  +----------------+    |
        |                        |        |                        |
        |    +Pod-------------+  |        |  +Pod-------------+    |
        |    |                |  |        |  |                |    |
        |    |    Database    |  |        |  |    Database    |    |
        |    |                |--[Service]---|                |    |
        |    +----------------+  |        |  +----------------+    |
        |               |        |        |        |               |
        |              [[------StatefulSet---------]]              |
        |                        |        |                        |
        +--Node-1----------------+        +--Node-2----------------+



NOTE: Databases can't be replicated via Deployment because
      Database has State.  Need to avoid data inconsistencies
      hence StatefulSet

StatefulSet:  Used for Stateful applications i.e. databases

    Deployments  -->>  Apps 
    StatefulSets -->>  Databases 


StatefulSet responsible for scaling up / down pods but importatntly
makes sure the db reads / writes are synchronized 

NOTE: Deploying StatefulSets can be difficult 
      Databases are often hosed outside of K8s cluster


######################################################################################
## Kubernetes Architecture
######################################################################################



Two types of nodes:  Master / Workder (Node)
  - Each Node has multiple pods on it 
  - 3 Processes MUST BE INSTALLED ON EVERY Node to:
    - manage and schedule pods

Nodes to the "work" i.e. Worker Nodes

Processes needed: 
1. Container Runtime
    - independent of Kubernetes

2. Kubelet: 
    - Kubernetes process
    - process that schedules Pods/containers
    - interacts with both container and node
    - Kubelet starts the pod with a container inside
        - assigns resources from node to container
            - i.e. CPU / RAM / Storage

3. Kube proxy: 
    - Kubernetes process
    - forwards requests from service to a specific pod
        - intelligent forwarding logic
        - communication performant and low overhead
            i.e. App requesting DB Service will get routed to same node 
                if both App and DB are running on same node
                    - no network overhead

        +-Node-----------------------------+
        |                                  |
        |    +Pod-------------+            |
        |    |                |            |
        |    |     App        |------+     |
        |    |                |      |     |
        |    +----------------+  [ Kube ]<-+------>>
        |                        [Proxy ]  |
        |    +Pod-------------+      |     |
        |    |                |      |     |
        |    |    Database    |------+     |
        |    |                |      |     |
        |    +----------------+      |     |
        |                            |     |
        |                            |     |
        |                       [Kubelet]  |
        |                           |      |
        |[container runtime]--------+      |
        |  ( Docker )                      |
        +----------------------------------+

Master Nodes: 
  - schedules pod
  - reschedule / restarts pod
  - joins new Node
  - 4 Processes MUST BE INSTALLED ON EVERY Master Node

1. API Server 
  - Client interacts with API server to deploy new app, etc
        - kubelet, UI, API
  - Cluster Gateway 
    - Updates, Queries
  - Gatekeeper for Authentication

2. Scheduler
  - Request for a new Pod: API Server -->> Scheduler
    - starts app on worker node
    - determines where (which node) pod should be schedule
    - initiates scheduling thru kubelet

3. Controller Manager
  - Detects state changes of cluster (i.e. crashed pods)
    - reschedules dead pods i.e. restore state
        - Controller Manager -> Scheduler -> Kubelet

4. etcd
  - key value store of Cluster State
    - "cluster brain"
    - All cluster changes stored in key value store
        - killed / restarted pod
        

NOTE: Application data NOT stored in etcd        
                                                                          [Client]
                                                                             |
                                                                      Update | Query
        +-Node-----------------------------+               +-Master--------------------------------+           
        |                                  |               |    [-----   API Server   -----]       |  <-- Cluster Gateway
        |    +Pod-------------+            |               |                                       |            + 
        |    |                |            |               |                                       |       Auth / Auth
        |    |     App        |------+     |          +----+----[-----   Scheduler   ------] <-+   | 
        |    |                |      |     |          |    |                ^                  |   |
        |    +----------------+  [ Kube ]<-+---->>    |    |        restart | crashed pod      |   |
        |                        [Proxy ]  |          |    |                |                  |   |
        |    +Pod-------------+      |     |          |    |    [--- Controller Manager ---] <-+   |
        |    |                |      |     |          |    |                                   |   |
        |    |    Database    |------+     |          |    |                                   |   |
        |    |                |      |     |          |    |                                   |   |
        |    +----------------+      |     |          |    |    [---------- etcd ----------] <-+   |  <-- Cluster "Brain"
        |                            |     |          |    |    [ key / value, key / value ]       |   holds state of cluster for
        |                            |     | request  |    |                                       |  Controller Manager and Scheduler
        |                       [Kubelet]<-+----------+    |                                       |
        |                           |      | new pod       |                                       |
        |[container runtime]--------+      |               |                                       |
        |  ( Docker )                      |               |                                       |
        +----------------------------------+               +---------------------------------------+           


Masters are usually in a cluster
 - API Server is load balanced
 - etcd is distributed storage across all master nodes 

        +-Master-1--------+    +-Master-2--------+    +-Master-3--------+
        |                 |    |                 |    |                 |
   +----+-----------------+----+-----------------+----+-----------------+----+
   |    |                 |    |                 |    |                 |    |
   |    | [ API Server ]  |    | [ API Server ]  |    | [ API Server ]  |    | <-- Load Balanced across Masters
   |    |                 |    |                 |    |                 |    |
   +----+-----------------+----+-----------------+----+-----------------+----+
        |                 |    |                 |    |                 |
        | [ Scheduler  ]  |    | [ Scheduler  ]  |    | [ Scheduler  ]  |
        |                 |    |                 |    |                 |
        | [Controller Mgr]|    | [Controller Mgr]|    | [Controller Mgr]|
        |                 |    |                 |    |                 |
   +----+-----------------+----+-----------------+----+-----------------+----+
   |    |                 |    |                 |    |                 |    |
   |    | [    etcd    ]  |    | [    etcd    ]  |    | [    etcd    ]  |    | <-- Distributed Storage across Masters
   |    |                 |    |                 |    |                 |    |
   +----+-----------------+----+-----------------+----+-----------------+----+
        |                 |    |                 |    |                 |
        +-----------------+    +-----------------+    +-----------------+


Master Nodes need less resources:
    - CPU / RAM / Storage
    - they are only running master processes

Worker Nodes need MORE resources:
    - CPU / RAM / Storage
    - they are running the applications and interfacing with pods


Increasing cluster with new Master / Nodes:
    - get new bare server
    - install master / worker node processes
    - add to cluster




######################################################################################
## minikube and kubectl - local setup
######################################################################################

minikube: one node cluster 
  - master process and worker process on one machine 
  - docker pre-installed
  - run via virtual box
  - 1 node k8s cluster that runs in VirutalBox
        - testing, etc.

        Minikube
 +--------------------------+
 |  +--------------------+  |
 |  | [Master Processes] |  |
 |  |                    |  |
 |  | [Worker Processes] |  |
 |  |                    |  |
 |  |                    |  |
 |  | [    Docker     ]  |  |
 |  +--------Node--------+  |
 |                          |
 +-VirtualBox---------------+


NOTE: check this out for minikube on lxc:
      https://github.com/d3adwolf/kubernetes-inside-proxmox-lxc

kubectl
 - interact with k8s cluster via API Server
    - UI, API, CLI
 - kubectl is CLI client 
 - kubectl can interface with minikube and k8s clusters


    [ minikube ]   [ k8s cluster ]
        +-----------------+
                | 
             kubectl


Install doc:
https://kubernetes/io/docs/tasks/tools/install-minikube
https://kubernetes/io/docs/tasks/tools/install-kubectl


Install minikube on a lxc container on proxmox:
https://github.com/d3adwolf/kubernetes-inside-proxmox-lxc


NOTE: minikube is installed on an Ubuntu 24 image on proxmox as minikube at 192.168.99.33 w/ ansible id installed
ssh ansible@minikube
Latest minikube and kubectl installed as well as docker

kubectl get nodes
NAME       STATUS   ROLES           AGE     VERSION
minikube   Ready    control-plane   2m50s   v1.32.0

minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured

kubectl version
Client Version: v1.32.1
Kustomize Version: v5.5.0
Server Version: v1.32.0

######################################################################################
## kubectl commands
######################################################################################

[ LAST HERE 45:01 ]






















Hashicorp Vault
https://www.youtube.com/watch?v=klyAhaklGNU


.